# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T07:41:27+00:00

from __future__ import annotations

from datetime import date, datetime
from enum import Enum
from typing import Any, Dict, List, Optional
from uuid import UUID

from pydantic import AnyUrl, BaseModel, Field, RootModel, condecimal, conint, constr


class AccountV2StatusEnum(Enum):
    DISCOVERED = 'DISCOVERED'
    PROCESSING = 'PROCESSING'
    READY = 'READY'
    ERROR = 'ERROR'
    SUSPENDED = 'SUSPENDED'


class AddressCountryEnum(Enum):
    AT = 'AT'
    BE = 'BE'
    BG = 'BG'
    HR = 'HR'
    CY = 'CY'
    CZ = 'CZ'
    DK = 'DK'
    EE = 'EE'
    FI = 'FI'
    FR = 'FR'
    DE = 'DE'
    GR = 'GR'
    HU = 'HU'
    IS = 'IS'
    IE = 'IE'
    IT = 'IT'
    LV = 'LV'
    LI = 'LI'
    LT = 'LT'
    LU = 'LU'
    MT = 'MT'
    NL = 'NL'
    NO = 'NO'
    PL = 'PL'
    PT = 'PT'
    RO = 'RO'
    SK = 'SK'
    SI = 'SI'
    ES = 'ES'
    SE = 'SE'
    GB = 'GB'


class CountryEnum(Enum):
    AT = 'AT'
    BE = 'BE'
    BG = 'BG'
    HR = 'HR'
    CY = 'CY'
    CZ = 'CZ'
    DK = 'DK'
    EE = 'EE'
    FI = 'FI'
    FR = 'FR'
    DE = 'DE'
    GR = 'GR'
    HU = 'HU'
    IS = 'IS'
    IE = 'IE'
    IT = 'IT'
    LV = 'LV'
    LI = 'LI'
    LT = 'LT'
    LU = 'LU'
    MT = 'MT'
    NL = 'NL'
    NO = 'NO'
    PL = 'PL'
    PT = 'PT'
    RO = 'RO'
    SK = 'SK'
    SI = 'SI'
    ES = 'ES'
    SE = 'SE'
    GB = 'GB'


class EndUserAgreement(BaseModel):
    accepted: Optional[datetime] = Field(
        None,
        description='The date & time at which the end user accepted the agreement.',
        title='Accepted Date',
    )
    access_scope: Optional[List[List[Any]]] = Field(
        ['balances', 'details', 'transactions'],
        description="Array containing one or several values of ['balances', 'details', 'transactions']",
        title='Level of information to access (by default all)',
    )
    access_valid_for_days: Optional[conint(ge=1, le=90)] = Field(
        90,
        description='Number of days from acceptance that the access can be used.',
        title='Access Valid For (Days)',
    )
    created: Optional[datetime] = Field(
        None,
        description='The date & time at which the end user agreement was created.',
        title='Created Date',
    )
    id: Optional[UUID] = Field(
        None,
        description='The ID of this End User Agreement, used to refer to this end user agreement in other API calls.',
        title='End User Agreement ID',
    )
    institution_id: str = Field(..., description='an Institution ID for this EUA')
    max_historical_days: Optional[conint(ge=1, le=730)] = Field(
        90,
        description='Maximum number of days of transaction data to retrieve.',
        title='Maximum Historical Days',
    )


class EndUserAgreementRequest(BaseModel):
    access_scope: Optional[List[List[Any]]] = Field(
        ['balances', 'details', 'transactions'],
        description="Array containing one or several values of ['balances', 'details', 'transactions']",
        title='Level of information to access (by default all)',
    )
    access_valid_for_days: Optional[conint(ge=1, le=90)] = Field(
        90,
        description='Number of days from acceptance that the access can be used.',
        title='Access Valid For (Days)',
    )
    institution_id: str = Field(..., description='an Institution ID for this EUA')
    max_historical_days: Optional[conint(ge=1, le=730)] = Field(
        90,
        description='Maximum number of days of transaction data to retrieve.',
        title='Maximum Historical Days',
    )


class EnduserAcceptanceDetailsRequest(BaseModel):
    ip_address: str = Field(..., title='end user IP address')
    user_agent: str = Field(..., title='user agent string for the end user')


class ExecutionRuleEnum(Enum):
    following = 'following'
    preceding = 'preceding'


class FrequencyEnum(Enum):
    Daily = 'Daily'
    Weekly = 'Weekly'
    EveryTwoWeeks = 'EveryTwoWeeks'
    Monthly = 'Monthly'
    EveryTwoMonths = 'EveryTwoMonths'
    Quarterly = 'Quarterly'
    SemiAnnual = 'SemiAnnual'
    Annual = 'Annual'
    MonthlyVariable = 'MonthlyVariable'


class InstructedAmount(BaseModel):
    amount: condecimal(
        ge=0.01000000000000000020816681711721685132943093776702880859375
    ) = Field(..., description='Instructed amount')
    currency: constr(max_length=3) = Field(
        ..., description='Instructed amount currency'
    )


class InstructedAmountRequest(BaseModel):
    amount: condecimal(
        ge=0.01000000000000000020816681711721685132943093776702880859375
    ) = Field(..., description='Instructed amount')
    currency: constr(max_length=3) = Field(
        ..., description='Instructed amount currency'
    )


class Integration(BaseModel):
    bic: Optional[str] = None
    countries: List[str]
    id: str
    logo: str
    name: str
    transaction_total_days: Optional[str] = '90'


class JWTObtainPairRequest(BaseModel):
    secret_id: str = Field(..., description='Secret id from /user-secrets/')
    secret_key: str = Field(..., description='Secret key from /user-secrets/')


class JWTRefreshRequest(BaseModel):
    refresh: str


class PaginatedEndUserAgreementList(BaseModel):
    count: Optional[int] = Field(None, examples=[123])
    next: Optional[AnyUrl] = Field(
        None,
        examples=[
            'https://ob.nordigen.com/api/v2/agreements/enduser/?limit=100&offset=0'
        ],
    )
    previous: Optional[AnyUrl] = Field(
        None,
        examples=[
            'https://ob.nordigen.com/api/v2/agreements/enduser/?limit=100&offset=0'
        ],
    )
    results: Optional[List[EndUserAgreement]] = None


class PaymentProductEnum(Enum):
    T2P = 'T2P'
    SCT = 'SCT'
    ISCT = 'ISCT'
    CBCT = 'CBCT'


class PaymentStatusEnum(Enum):
    INIT = 'INIT'
    ERRE = 'ERRE'
    ERRS = 'ERRS'
    ACCC = 'ACCC'
    ACCP = 'ACCP'
    ACSC = 'ACSC'
    ACSP = 'ACSP'
    ACTC = 'ACTC'
    ACWC = 'ACWC'
    ACWP = 'ACWP'
    RCVD = 'RCVD'
    PDNG = 'PDNG'
    RJCT = 'RJCT'
    CANC = 'CANC'
    ACFC = 'ACFC'
    PATC = 'PATC'
    PART = 'PART'


class PaymentTypeEnum(Enum):
    single_payment = 'single-payment'
    bulk_payment = 'bulk-payment'
    periodic_payment = 'periodic-payment'


class PeriodicPayment(BaseModel):
    day_of_execution: Optional[str] = None
    end_date: Optional[date] = None
    execution_rule: Optional[ExecutionRuleEnum] = Field(
        'following', description='Behavior when periodic payment dates fall on holiday.'
    )
    frequency: Optional[FrequencyEnum] = 'Monthly'
    start_date: date


class PeriodicPaymentRequest(BaseModel):
    day_of_execution: Optional[str] = None
    end_date: Optional[date] = None
    execution_rule: Optional[ExecutionRuleEnum] = Field(
        'following', description='Behavior when periodic payment dates fall on holiday.'
    )
    frequency: Optional[FrequencyEnum] = 'Monthly'
    start_date: date


class PremiumAccountQuery(BaseModel):
    country: Optional[CountryEnum] = None
    date_from: Optional[date] = None
    date_to: Optional[date] = None


class RequisitionLinkParamsRequest(BaseModel):
    aspsp_id: str = Field(
        ...,
        description="ASPSP ID. Should match one used while creating EUA, if it's linked to this requisition",
    )


class RequisitionLinks(BaseModel):
    initiate: Optional[AnyUrl] = None


class RequisitionV2Request(BaseModel):
    account_selection: Optional[bool] = Field(
        False, description='option to enable account selection view for the end user'
    )
    agreement: Optional[UUID] = Field(
        None, description='EUA associated with this requisition'
    )
    institution_id: str = Field(
        ..., description='an Institution ID for this Requisition'
    )
    redirect: AnyUrl = Field(
        ...,
        description='redirect URL to your application after end-user authorization with ASPSP',
    )
    redirect_immediate: Optional[bool] = Field(
        False,
        description='enable redirect back to the client after account list received',
    )
    reference: Optional[constr(max_length=256)] = Field(
        None, description='additional ID to identify the end user'
    )
    ssn: Optional[constr(max_length=64)] = Field(
        None, description='optional SSN field to verify ownership of the account'
    )
    user_language: Optional[constr(max_length=5)] = Field(
        None, description='A two-letter country code (ISO 639-1)'
    )


class SpectacularJWTObtain(BaseModel):
    access: Optional[str] = Field(None, description='Your access token')
    access_expires: Optional[int] = Field(
        86400, description='Access token expires in seconds'
    )
    refresh: Optional[str] = Field(None, description='Your refresh token')
    refresh_expires: Optional[int] = Field(
        2592000, description='Refresh token expires in seconds'
    )


class SpectacularJWTRefresh(BaseModel):
    access: Optional[str] = Field(None, description='Your access token')
    access_expires: Optional[int] = Field(
        86400, description='Access token expires in seconds'
    )


class Status1c5Enum(Enum):
    CR = 'CR'
    ID = 'ID'
    LN = 'LN'
    RJ = 'RJ'
    ER = 'ER'
    SU = 'SU'
    EX = 'EX'
    GC = 'GC'
    UA = 'UA'
    GA = 'GA'
    SA = 'SA'


class TypeEnum(Enum):
    IBAN = 'IBAN'
    SCAN = 'SCAN'


class ApiV2AccountsPremiumIdTransactionsGetResponse(
    RootModel[Optional[Dict[str, Any]]]
):
    root: Optional[Dict[str, Any]] = None


class ApiV2AccountsIdGetResponse(RootModel[Optional[Dict[str, Any]]]):
    root: Optional[Dict[str, Any]] = None


class ApiV2AccountsIdBalancesGetResponse(RootModel[Optional[Dict[str, Any]]]):
    root: Optional[Dict[str, Any]] = None


class ApiV2AccountsIdDetailsGetResponse(RootModel[Optional[Dict[str, Any]]]):
    root: Optional[Dict[str, Any]] = None


class ApiV2AccountsIdTransactionsGetResponse(RootModel[Optional[Dict[str, Any]]]):
    root: Optional[Dict[str, Any]] = None


class ApiV2AgreementsEnduserGetResponse(RootModel[Optional[Dict[str, Any]]]):
    root: Optional[Dict[str, Any]] = None


class ApiV2AgreementsEnduserPostResponse(RootModel[Optional[Dict[str, Any]]]):
    root: Optional[Dict[str, Any]] = None


class ApiV2AgreementsEnduserIdDeleteResponse(RootModel[Optional[Dict[str, Any]]]):
    root: Optional[Dict[str, Any]] = None


class ApiV2AgreementsEnduserIdGetResponse(RootModel[Optional[Dict[str, Any]]]):
    root: Optional[Dict[str, Any]] = None


class ApiV2AgreementsEnduserIdAcceptPutResponse(RootModel[Optional[Dict[str, Any]]]):
    root: Optional[Dict[str, Any]] = None


class ApiV2InstitutionsGetResponse(RootModel[List[Integration]]):
    root: List[Integration]


class ApiV2InstitutionsGetResponse1(RootModel[Optional[Dict[str, Any]]]):
    root: Optional[Dict[str, Any]] = None


class ApiV2InstitutionsIdGetResponse(RootModel[Optional[Dict[str, Any]]]):
    root: Optional[Dict[str, Any]] = None


class ApiV2PaymentsGetResponse(RootModel[Optional[Dict[str, Any]]]):
    root: Optional[Dict[str, Any]] = None


class ApiV2PaymentsPostResponse(RootModel[Optional[Dict[str, Any]]]):
    root: Optional[Dict[str, Any]] = None


class ApiV2PaymentsAccountGetResponse1(RootModel[Optional[Dict[str, Any]]]):
    root: Optional[Dict[str, Any]] = None


class ApiV2PaymentsFieldsInstitutionIdGetResponse(RootModel[Optional[Dict[str, Any]]]):
    root: Optional[Dict[str, Any]] = None


class ApiV2PaymentsIdDeleteResponse(RootModel[Optional[Dict[str, Any]]]):
    root: Optional[Dict[str, Any]] = None


class ApiV2PaymentsIdGetResponse(RootModel[Optional[Dict[str, Any]]]):
    root: Optional[Dict[str, Any]] = None


class ApiV2RequisitionsGetResponse(RootModel[Optional[Dict[str, Any]]]):
    root: Optional[Dict[str, Any]] = None


class ApiV2RequisitionsPostResponse(RootModel[Optional[Dict[str, Any]]]):
    root: Optional[Dict[str, Any]] = None


class ApiV2RequisitionsIdDeleteResponse(RootModel[Optional[Dict[str, Any]]]):
    root: Optional[Dict[str, Any]] = None


class ApiV2RequisitionsIdGetResponse(RootModel[Optional[Dict[str, Any]]]):
    root: Optional[Dict[str, Any]] = None


class ApiV2TokenNewPostResponse(RootModel[Optional[Dict[str, Any]]]):
    root: Optional[Dict[str, Any]] = None


class ApiV2TokenRefreshPostResponse(RootModel[Optional[Dict[str, Any]]]):
    root: Optional[Dict[str, Any]] = None


class AccountV2(BaseModel):
    created: Optional[datetime] = Field(
        None,
        description='The date & time at which the account object was created.',
        title='Created date/time',
    )
    iban: Optional[str] = Field(None, description='The Account IBAN')
    id: Optional[UUID] = Field(
        None,
        description='The ID of this Account, used to refer to this account in other API calls.',
        title='Account ID',
    )
    institution_id: Optional[str] = Field(
        None, description='The ASPSP associated with this account.', title='ASPSP ID'
    )
    last_accessed: Optional[datetime] = Field(
        None,
        description='The date & time at which the account object was last accessed.',
        title='Last accessed date/time',
    )
    owner_name: Optional[str] = Field(
        None, description='The name of the account owner.', title='Account Owner Name'
    )
    status: Optional[AccountV2StatusEnum] = Field(
        None,
        description='The processing status of this account.',
        title='Account Status',
    )


class CreditorAccount(BaseModel):
    account: constr(max_length=128) = Field(
        ..., description='Creditor account type identifier'
    )
    address_country: Optional[constr(max_length=2)] = Field(
        None, description='Creditor account address country'
    )
    currency: constr(max_length=3) = Field(..., description='Creditor account currency')
    id: Optional[UUID] = Field(None, description='Unique entry ID')
    name: constr(max_length=70) = Field(..., description='Creditor account name')
    type: Optional[TypeEnum] = Field('IBAN', description='Creditor account type')


class CreditorAccountWrite(BaseModel):
    account: constr(max_length=128) = Field(
        ..., description='Creditor account type identifier'
    )
    address_country: Optional[AddressCountryEnum] = None
    address_street: Optional[constr(max_length=140)] = Field(
        None, description='Creditor account address street'
    )
    agent: Optional[constr(max_length=128)] = Field(
        None, description='Creditor account BICFI Identifier'
    )
    agent_name: Optional[constr(max_length=140)] = Field(
        None, description='Creditor account agent name'
    )
    currency: constr(max_length=3) = Field(..., description='Creditor account currency')
    id: Optional[UUID] = Field(None, description='Unique entry ID')
    institution_id: Optional[str] = Field(
        None, description='an Institution ID for this CreditorAccount'
    )
    name: constr(max_length=70) = Field(..., description='Creditor account name')
    post_code: Optional[constr(max_length=30)] = Field(
        None, description='Creditor account address post code'
    )
    type: Optional[TypeEnum] = Field('IBAN', description='Creditor account type')


class CreditorAccountWriteRequest(BaseModel):
    account: constr(max_length=128) = Field(
        ..., description='Creditor account type identifier'
    )
    address_country: Optional[AddressCountryEnum] = None
    address_street: Optional[constr(max_length=140)] = Field(
        None, description='Creditor account address street'
    )
    agent: Optional[constr(max_length=128)] = Field(
        None, description='Creditor account BICFI Identifier'
    )
    agent_name: Optional[constr(max_length=140)] = Field(
        None, description='Creditor account agent name'
    )
    currency: constr(max_length=3) = Field(..., description='Creditor account currency')
    institution_id: Optional[str] = Field(
        None, description='an Institution ID for this CreditorAccount'
    )
    name: constr(max_length=70) = Field(..., description='Creditor account name')
    post_code: Optional[constr(max_length=30)] = Field(
        None, description='Creditor account address post code'
    )
    type: Optional[TypeEnum] = Field('IBAN', description='Creditor account type')


class DebtorAccountWrite(BaseModel):
    account: Optional[constr(max_length=128)] = Field(
        None, description='Debtor account type identifier'
    )
    address_country: Optional[constr(max_length=2)] = Field(
        None, description='Debtor account address country'
    )
    address_street: Optional[constr(max_length=140)] = Field(
        None, description='Debtor account address street'
    )
    currency: Optional[constr(max_length=3)] = Field(
        None, description='Debtor account currency'
    )
    name: constr(max_length=70) = Field(..., description='Debtor account name')
    post_code: Optional[constr(max_length=30)] = Field(
        None, description='Debtor account post code'
    )
    type: Optional[TypeEnum] = Field('IBAN', description='Debtor account type')
    type_number: Optional[constr(max_length=128)] = Field(
        None, description='Debtor account type identifier'
    )


class DebtorAccountWriteRequest(BaseModel):
    account: Optional[constr(max_length=128)] = Field(
        None, description='Debtor account type identifier'
    )
    address_country: Optional[constr(max_length=2)] = Field(
        None, description='Debtor account address country'
    )
    address_street: Optional[constr(max_length=140)] = Field(
        None, description='Debtor account address street'
    )
    currency: Optional[constr(max_length=3)] = Field(
        None, description='Debtor account currency'
    )
    name: constr(max_length=70) = Field(..., description='Debtor account name')
    post_code: Optional[constr(max_length=30)] = Field(
        None, description='Debtor account post code'
    )
    type: Optional[TypeEnum] = Field('IBAN', description='Debtor account type')
    type_number: Optional[constr(max_length=128)] = Field(
        None, description='Debtor account type identifier'
    )


class PaginatedCreditorAccountList(BaseModel):
    count: Optional[int] = Field(None, examples=[123])
    next: Optional[AnyUrl] = Field(
        None, examples=['http://api.example.org/accounts/?offset=400&limit=100']
    )
    previous: Optional[AnyUrl] = Field(
        None, examples=['http://api.example.org/accounts/?offset=200&limit=100']
    )
    results: Optional[List[CreditorAccount]] = None


class PaymentRead(BaseModel):
    creditor_account: UUID = Field(..., description='Registered creditor account')
    custom_payment_id: Optional[constr(max_length=35)] = Field(
        None,
        description='Payment Custom Payment ID',
        title='Payment end to end identification.',
    )
    debtor_account: DebtorAccountWrite
    description: Optional[str] = Field('GOCARDLESS', description='Payment description')
    instructed_amount: InstructedAmount = Field(..., description='Instructed amount')
    payment_id: Optional[str] = Field(None, description='Payment ID')
    payment_product: Optional[PaymentProductEnum] = Field(
        'ISCT', description='Payment product'
    )
    payment_status: Optional[PaymentStatusEnum] = Field(
        None, description='Payment end to end identification'
    )
    payment_type: Optional[PaymentTypeEnum] = Field(None, description='Payment Type')
    redirect: AnyUrl = Field(
        ..., description='Redirect URL to your application after payment is done'
    )


class PaymentWrite(BaseModel):
    creditor_account: UUID = Field(..., description='Registered creditor account')
    custom_payment_id: Optional[constr(max_length=35)] = Field(
        None,
        description='Payment Custom Payment ID',
        title='Payment end to end identification.',
    )
    description: Optional[str] = Field('GOCARDLESS', description='Payment description')
    instructed_amount: InstructedAmount = Field(..., description='Instructed amount')
    link: Optional[AnyUrl] = Field(
        'https://ob.nordigen.com/pis/start/83ca8de5-dbef-45fc-a137-f185d0e7a0d8/{$INSTITUTION_ID}',
        description='Link to initiate authorization with Institution',
    )
    payment_id: Optional[str] = Field(None, description='Payment ID')
    payment_product: Optional[PaymentProductEnum] = Field(
        'ISCT', description='Payment product'
    )
    payment_status: Optional[PaymentStatusEnum] = Field(
        None, description='Payment end to end identification'
    )
    payment_type: Optional[PaymentTypeEnum] = Field(None, description='Payment Type')
    periodic_payment: Optional[PeriodicPayment] = None
    redirect: AnyUrl = Field(
        ..., description='Redirect URL to your application after payment is done'
    )
    requested_execution_date: Optional[date] = Field(
        None, description='Payment Execution date (for periodic payments)'
    )


class PaymentWriteRequest(BaseModel):
    creditor_account: UUID = Field(..., description='Registered creditor account')
    custom_payment_id: Optional[constr(max_length=35)] = Field(
        None,
        description='Payment Custom Payment ID',
        title='Payment end to end identification.',
    )
    debtor_account: Optional[DebtorAccountWriteRequest] = Field(
        None, description='Debtor account'
    )
    description: Optional[str] = Field('GOCARDLESS', description='Payment description')
    institution_id: Optional[str] = Field(
        'SWEDBANK_SANDBOX_SANDLV22', description='Institution ID for Payment'
    )
    instructed_amount: InstructedAmountRequest = Field(
        ..., description='Instructed amount'
    )
    payment_product: Optional[PaymentProductEnum] = Field(
        'ISCT', description='Payment product'
    )
    periodic_payment: Optional[PeriodicPaymentRequest] = None
    redirect: AnyUrl = Field(
        ..., description='Redirect URL to your application after payment is done'
    )
    requested_execution_date: Optional[date] = Field(
        None, description='Payment Execution date (for periodic payments)'
    )


class RequisitionV2(BaseModel):
    account_selection: Optional[bool] = Field(
        False, description='option to enable account selection view for the end user'
    )
    accounts: Optional[List[UUID]] = Field(
        None,
        description='array of account IDs retrieved within a scope of this requisition',
    )
    agreement: Optional[UUID] = Field(
        None, description='EUA associated with this requisition'
    )
    created: Optional[datetime] = Field(
        None,
        description='The date & time at which the requisition was created.',
        title='Created Date',
    )
    id: Optional[UUID] = None
    institution_id: str = Field(
        ..., description='an Institution ID for this Requisition'
    )
    link: Optional[AnyUrl] = Field(
        'https://ob.nordigen.com/psd2/start/3fa85f64-5717-4562-b3fc-2c963f66afa6/{$INSTITUTION_ID}',
        description='link to initiate authorization with Institution',
    )
    redirect: AnyUrl = Field(
        ...,
        description='redirect URL to your application after end-user authorization with ASPSP',
    )
    redirect_immediate: Optional[bool] = Field(
        False,
        description='enable redirect back to the client after account list received',
    )
    reference: Optional[constr(max_length=256)] = Field(
        None, description='additional ID to identify the end user'
    )
    ssn: Optional[constr(max_length=64)] = Field(
        None, description='optional SSN field to verify ownership of the account'
    )
    status: Optional[Status1c5Enum] = Field(
        None, description='status of this requisition', title='Requisition status'
    )
    user_language: Optional[constr(max_length=5)] = Field(
        None, description='A two-letter country code (ISO 639-1)'
    )


class SpectacularRequisitionV2(BaseModel):
    account_selection: Optional[bool] = Field(
        False, description='option to enable account selection view for the end user'
    )
    accounts: Optional[List] = Field(
        [],
        description='array of account IDs retrieved within a scope of this requisition',
    )
    agreement: Optional[UUID] = Field(
        None, description='EUA associated with this requisition'
    )
    created: Optional[datetime] = Field(
        None,
        description='The date & time at which the requisition was created.',
        title='Created Date',
    )
    id: Optional[UUID] = None
    institution_id: str = Field(
        ..., description='an Institution ID for this Requisition'
    )
    link: Optional[AnyUrl] = Field(
        'https://ob.nordigen.com/psd2/start/3fa85f64-5717-4562-b3fc-2c963f66afa6/{$INSTITUTION_ID}',
        description='link to initiate authorization with Institution',
    )
    redirect: AnyUrl = Field(
        ...,
        description='redirect URL to your application after end-user authorization with ASPSP',
    )
    redirect_immediate: Optional[bool] = Field(
        False,
        description='enable redirect back to the client after account list received',
    )
    reference: Optional[constr(max_length=256)] = Field(
        None, description='additional ID to identify the end user'
    )
    ssn: Optional[constr(max_length=64)] = Field(
        None, description='optional SSN field to verify ownership of the account'
    )
    status: Optional[Status1c5Enum] = Field(
        None, description='status of this requisition', title='Requisition status'
    )
    user_language: Optional[constr(max_length=5)] = Field(
        None, description='A two-letter country code (ISO 639-1)'
    )


class ApiV2PaymentsAccountGetResponse(RootModel[List[CreditorAccount]]):
    root: List[CreditorAccount]


class PaginatedPaymentReadList(BaseModel):
    count: Optional[int] = Field(None, examples=[123])
    next: Optional[AnyUrl] = Field(
        None, examples=['http://api.example.org/accounts/?offset=400&limit=100']
    )
    previous: Optional[AnyUrl] = Field(
        None, examples=['http://api.example.org/accounts/?offset=200&limit=100']
    )
    results: Optional[List[PaymentRead]] = None


class PaginatedRequisitionV2List(BaseModel):
    count: Optional[int] = Field(None, examples=[123])
    next: Optional[AnyUrl] = Field(
        None,
        examples=['https://ob.nordigen.com/api/v2/requisitions/?limit=100&offset=0'],
    )
    previous: Optional[AnyUrl] = Field(
        None,
        examples=['https://ob.nordigen.com/api/v2/requisitions/?limit=100&offset=0'],
    )
    results: Optional[List[RequisitionV2]] = None
